mean.exp <- rep(20, 10000)
mean.exp[1:1000] <-rpois(40,1000)
mean.exp <- rep(20, 10000)
mean.exp[1:1000] <-rpois(1000,40)
score.exp <- rpois(10000, mean.exp)
perm <- sample(score.exp, length(score.exp))
cs <- score.exp - perm
hist(perm)
min(perm)
hist(score.exp)
max(score.exp)
max(perm)
hist(cs)
perm <- sample(score.exp, length(score.exp), replace = T)
cs <- score.exp - perm
c_abs = abs(cs[cs != 0])
c_abs  = sort(unique(c_abs))
FDR = 0.05
i = 1
emp_fdp = rep(NA, length(c_abs))
emp_fdp[1] = 2
while(i <= length(c_abs) & emp_fdp[max(i-1, 1)] > min(FDR)){
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(cs <t)
emp_fdp[i] = (1 + sum(cs[unintre] <= -t))/ sum(cs >= t)
i = i + 1
}
while(i <= length(c_abs) & emp_fdp[max(i-1, 1)] > min(FDR)){
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(cs <t)
emp_fdp[i] = (1 + sum(cs[unintre.index] <= -t))/ sum(cs >= t)
i = i + 1
}
i
emp_fdp
i=40
# print(i)
t = c_abs[i]
t
intre.index <- which(cs >= t)
unintre.index <- which(cs <t)
sum(cs[unintre.index] <= -t)
sum(cs >= t)
perm.index <- sample(1:length(score.exp), length(score.exp), replace = T)
perm <- score.exp[perm.index]
cs <- score.exp - perm
c_abs = abs(cs[cs != 0])
c_abs  = sort(unique(c_abs))
i=20
i
# print(i)
t = c_abs[i]
which(cs >= t)
intre.index <- which(cs >= t)
unintre.index <- which(cs <t)
unintre.index <- which(!perm.index %in% intre.index)
(1 + sum(cs[unintre.index] <= -t))
sum(cs >= t)
while(i <= length(c_abs) & emp_fdp[max(i-1, 1)] > min(FDR)){
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(!perm.index %in% intre.index)
emp_fdp[i] = (1 + sum(cs[unintre.index] <= -t))/ sum(cs >= t)
i = i + 1
}
i
emp_fdp
perm.index <- sample(1:length(score.exp), length(score.exp), replace = T)
perm <- score.exp[perm.index]
cs <- score.exp - perm
c_abs = abs(cs[cs != 0])
c_abs  = sort(unique(c_abs))
i = 1
emp_fdp = rep(NA, length(c_abs))
emp_fdp[1] = 2
while(i <= length(c_abs) & emp_fdp[max(i-1, 1)] > min(FDR)){
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(!perm.index %in% intre.index)
emp_fdp[i] = (1 + sum(cs[unintre.index] <= -t))/ sum(cs >= t)
i = i + 1
}
i
i=20
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(!perm.index %in% intre.index)
intre.index
which(cs[unintre.index] <= -t)
cs[unintre.index]
cs[unintre.index][-76]
cs[unintre.index][76]
unintre.index
unintre.index[76]
perm[81]
score.exp[81]
perm.index[81]
library(locfdr)
install.packages("locfdr")
library(locfdr)
locfdr(score.exp)
?locfdr
locfdr((score.exp-mean(score.exp))/sd(score.exp))
re <- locfdr((score.exp-mean(score.exp))/sd(score.exp))
re$fdr
which(re$fdr <=0.05)
hist(score.exp)
median(score.exp)
cs <- score.exp - 20
c_abs = abs(cs[cs != 0])
c_abs  = sort(unique(c_abs))
i = 1
emp_fdp = rep(NA, length(c_abs))
emp_fdp[1] = 2
while(i <= length(c_abs) & emp_fdp[max(i-1, 1)] > min(FDR)){
# print(i)
t = c_abs[i]
intre.index <- which(cs >= t)
unintre.index <- which(!perm.index %in% intre.index)
emp_fdp[i] = (1 + sum(cs <= -t))/ sum(cs >= t)
i = i + 1
}
i
c_abs[!is.na(emp_fdp)]
emp_fdp[!is.na(emp_fdp)]
c_abs = c_abs[!is.na(emp_fdp)]
emp_fdp = emp_fdp[!is.na(emp_fdp)]
thre = c_abs[min(which(emp_fdp <= FDR))]
thre
discovery = which(cs >= thre))
discovery = which(cs >= thre)
discoveries
discovery
sum(discovery>1000)
sum(discovery>1000)/length(discovery)
perm1 <- sample(score.exp, length(score.exp), replace = T)
perm2 <- sample(score.exp, length(score.exp), replace = T)
perm3 <- sample(score.exp, length(score.exp), replace = T)
score.back <- cbind(perm1, perm2, perm3)
library(Clipper)
re <- Clipper(score.exp, score.back, analysis = 'd')
re
hist(re$contrast.score.value$tau)
hist(re$contrast.score.value$tau * re$contrast.score.value$kappa)
hist(re$contrast.score.value$tau * (2*re$contrast.score.value$kappa-1))
re <- Clipper(score.exp, score.back, analysis = 'd', FDR = 0.1)
sum(re$contrast.score.value$kappa[1:1000])
sum(re$contrast.score.value$kappa[1001:10000])
score.back <- cbind(perm1, perm2)
library(Clipper)
re <- Clipper(score.exp, score.back, analysis = 'd', FDR = 0.1)
sum(re$contrast.score.value$kappa[1:1000])
sum(re$contrast.score.value$kappa[1001:10000])
